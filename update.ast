#!/usr/bin/env asteria
// No Copyright
//
// Permission to use, copy, modify, and/or distribute this software for
// any purpose with or without fee is hereby granted.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
// WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
// FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
// DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
// AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
// OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

const SDK_LIB_ROOT = 'C:\Program Files (x86)\Windows Kits\10\Lib\10.0.26100.0';

const DEF_COPYRIGHT = [
  'This file is automatically generated from the corresponding import library',
  'from Microsoft Windows SDK. Permission to use, copy, modify, and/or',
  'distribute this software for any purpose with or without fee is hereby',
  'granted. No copyright is reserved.',
  '',
  'In order to generate an import library with GNU DLLTOOL, the `--kill-at`',
  'option is required.',
  '',
  'THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL',
  'WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES',
  'OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE',
  'FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY',
  'DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN',
  'AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT',
  'OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.',
];

const PRIVATE_EXPORTS = [
  'DllGetClassObject',
  'DllGetClassObjectWOW',
  'DllCanUnloadNow',
  'DllRegisterServer',
  'DllRegisterProxy',
  'DllRegisterWindowClasses',
  'DllUnregisterServer',
  'DllUnregisterServerWeReallyMeanIt',  // ?? what does this damn thing do?
  'DllUnregisterProxy',
  '_DllEntryPoint',
  '_DllMainCRTStartup',   // MSVC entry point
  '_DllMainCRTStartupForGS',
  '_DllMainCRTStartupForGS2',
  'DllMain',
  'DllMainCRTStartup',  // MinGW entry point
  'DllGetVersion',
  'DllDebugObjectRPCHook',
];

/////////////////////////////////////////////////////////////////////////////

// C:\Program Files\.../x64/ActiveDS.Lib(ACTIVEDS.dll):      file format COFF-import-file
var re_object_header = std.string.PCRE(
    '([-_.0-9a-z ():\\/]*\.lib)\((?<dll>[-_.0-9a-z]+)\):\tfile format (?<fmt>[-_.0-9a-z]+)\n'
    + '(?<remaining>.*)$',
    [ 'caseless', 'dotall' ]);

// [ 0](sec  0)(fl 0x00)(ty   0)(scl   0) (nx 0) 0x00000000 __imp_ADsBuildEnumerator
var re_symbol = std.string.PCRE(
    '^\[ *[0-9]+\]\(sec +[0-9]+\)\(fl +0x[0-9a-f]+\)\(ty +(?<type>[0-9]+)\)'
    + '\(scl +[0-9]+\)\s+\(nx +[0-9]+\)\s+0x[0-9a-f]+\s+(?<sym>.*)$',
    [ 'caseless' ]);

// replace filename extensions.
var re_file_ext = std.string.PCRE(
    '\.[a-z0-9_]{1,3}$',
    [ 'caseless' ]);

for(each um, _ -> std.filesystem.list(SDK_LIB_ROOT)) {
  for(each arch, _ -> std.filesystem.list(SDK_LIB_ROOT / um)) {
    std.filesystem.create_directory(arch);

    var dll_syms = {};
    for(each lib, _ -> std.filesystem.list(SDK_LIB_ROOT / um / arch)) {
      // filter out TLB files.
      if!(std.string.ends_with(std.string.to_lower(lib), '.lib'))
        continue;

      // dump symbols.
      var dump = std.system.pipe('llvm-objdump',
                                 [ '--syms', SDK_LIB_ROOT / um / arch / lib ],
                                 [ 'LC_ALL=C' ]);
      if(dump == null)
        continue;

      std.io.putfln("Processing: $1", SDK_LIB_ROOT / um / arch / lib);
      dump = std.string.replace(dump, "\r\n", "\n");

      // parse object files.
      var obj_m = re_object_header.named_match(dump);
      while(obj_m != null) {
        // find next object.
        var m = obj_m;
        dump = obj_m.remaining;
        obj_m = re_object_header.named_match(dump);

        // is import object?
        if(m.fmt == 'COFF-import-file') {
          var dll = std.string.to_lower(m.dll);
          var obj = std.string.slice(dump, 0, countof(dump) - countof(obj_m.'&'));
          for(each line -> std.string.explode(obj, "\n")) {
            // parse symbols
            m = re_symbol.named_match(line);
            if(m == null)
              continue;

            std.io.putfln(" - found symbol: $1", m.sym);

            var sym = m.sym;
            if((arch == 'arm64') && (m.type == '20') && std.string.starts_with(m.sym, '__imp_aux_'))
              sym = std.string.replace_slice(m.sym, 0, 10, '#');
            else if((m.type == '0') && std.string.starts_with(m.sym, '__imp_'))
              sym = std.string.slice(m.sym, 6);

            if((arch == 'x86') && std.string.starts_with(sym, '_'))
              sym = std.string.slice(sym, 1);

            for(each priv -> PRIVATE_EXPORTS)
              if((sym == priv)
                 || ((arch == 'x86') && std.string.starts_with(sym, priv + '@'))
                 || ((arch == 'arm64') && (sym == '#' + priv)))
                dll_syms[dll][sym].private = true;

            if(std.string.starts_with(m.sym, '__imp_'))
              dll_syms[dll][sym].imp = true;

            if((m.type == '20') && !std.string.starts_with(m.sym, '__imp_'))
              dll_syms[dll][sym].thunk = true;
          }
        }
      }
    }

    for(each dll, syms -> dll_syms) {
      var def = re_file_ext.replace(dll, '.def');

      // sort symbols in alphabetic order.
      var sorted_syms = [];
      for(each sym, props -> syms)
        if(props.private)
          sorted_syms[$] = sym + " PRIVATE";
        else if(!props.thunk)
          sorted_syms[$] = sym + " DATA";
        else if(props.imp)
          sorted_syms[$] = sym;

      sorted_syms = std.array.sort(sorted_syms,
          func(x, y) = std.string.to_lower(x) <=> std.string.to_lower(y));

      // compose DEF data.
      var st = "";
      for(each line -> DEF_COPYRIGHT) {
        st += ";";
        if(line != "") {
          st += " ";
          st += line;
        }
        st += "\n";
      }
      st += "\n";

      st += "LIBRARY \"";
      st += dll;
      st += "\"\n";

      st += "EXPORTS\n";
      for(each sym -> sorted_syms)  {
        st += "  ";
        st += sym;
        st += "\n";
      }

      // write DEF file.
      std.io.putfln("Writing: $1", arch / def);
      std.filesystem.write(arch / def, st);
    }
  }
}
